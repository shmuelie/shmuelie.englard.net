{"version":3,"sources":["blog/FluentBlog.js","blog/FluentBlog.ts"],"names":["__decorate","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","attr","observable","FASTElement","customElement","nullableNumberConverter","register","Blog","template","styles","FluentBlog","constructor","super","updateHash","boundHashUpdated","hashUpdated","bind","blogApi","loading","posts","post","currentPage","currentPost","blogId","oauthKey","currentPageId","id","currentPostId","currentPageChanged","_a","_b","toString","_load","currentPostChanged","configureBlogApi","blogIdChanged","oauthKeyChanged","connectedCallback","_c","_d","state","page","Number","splice","_loadPost","_loadPosts","$emit","response","getPost","getPosts","push","prototype","attribute","converter","name"],"mappings":"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","file":"FluentBlog.js","sourcesContent":[null,"import { } from 'https://unpkg.com/@fluentui/web-components@2.6.1'\nimport { attr, observable, FASTElement, customElement, nullableNumberConverter } from 'https://unpkg.com/@microsoft/fast-element@1.14.0'\nimport { register, ProviderCallback } from 'https://unpkg.com/hashed-es6@1.0.3'\nimport { Blog } from '../drop-in-blog/Blog.js'\nimport { template } from './template.js'\nimport { styles } from './styles.js'\nimport { IFluentBlog } from './IFluentBlog.js'\nimport { Post } from '../drop-in-blog/Post.js'\nimport { PostSummary } from '../drop-in-blog/PostSummary'\n\n@customElement({\n    name: 'fluent-blog',\n    template: template,\n    styles: styles\n})\nexport class FluentBlog extends FASTElement implements IFluentBlog {\n    /**\n     * Method to update the hash with state information. `null` when hash state not loaded.\n     */\n    private updateHash: ProviderCallback | null = null;\n    /**\n     * hashUpdated bound to the current instance.\n     */\n    private readonly boundHashUpdated = this.hashUpdated.bind(this);\n\n    private blogApi: Blog | null = null;\n\n    /**\n     * The component is loading the blog content.\n     */\n    @observable\n    loading: boolean = false;\n    /**\n     * The blog post summaries that are currently visible.\n     */\n    @observable\n    posts: PostSummary[] = [];\n    /**\n     * The blog post currently visible or null if showing the blog listing.\n     */\n    @observable\n    post: Post | null = null;\n\n    /**\n     * The current page in the blog listing.\n     */\n    @attr({\n        attribute: 'current-page',\n        converter: nullableNumberConverter\n    })\n    currentPage: number | null = null;\n\n    /**\n     * The ID of the current blog post or null if showing the listing.\n     */\n    @attr({\n        attribute: 'current-post',\n        converter: nullableNumberConverter\n    })\n    currentPost: number | null = null;\n\n    @attr({\n        attribute: 'blog-id'\n    })\n    blogId: string | null = null;\n\n    @attr({\n        attribute: 'oauth-key'\n    })\n    oauthKey: string | null = null;\n\n    /**\n     * The ID for the current page in the state.\n     */\n    private get currentPageId(): string {\n        return this.id + \"Page\";\n    }\n\n    /**\n     * The ID of the current post in the state.\n     */\n    private get currentPostId(): string {\n        return this.id + \"Post\";\n    }\n\n    /**\n     * Handles the currentPage attribute changed.\n     */\n    currentPageChanged(): void {\n        if (this.updateHash) {\n            this.updateHash({\n                [this.currentPageId]: this.currentPage?.toString() ?? \"\"\n            });\n            this._load();\n        }\n    }\n\n    /**\n     * Handles the currentPost attribute changed.\n     */\n    currentPostChanged(): void {\n        if (this.updateHash) {\n            this.updateHash({\n                [this.currentPostId]: this.currentPost?.toString() ?? \"\"\n            });\n            this._load();\n        }\n    }\n\n    private configureBlogApi(): void {\n        if (!this.blogApi &&\n            this.blogId &&\n            this.oauthKey) {\n                this.blogApi = new Blog(this.blogId, this.oauthKey);\n        }\n        if (this.updateHash) {\n            this._load();\n        }\n    }\n\n    blogIdChanged(): void {\n        this.configureBlogApi();\n    }\n\n    oauthKeyChanged(): void {\n        this.configureBlogApi();\n    }\n\n    override connectedCallback(): void {\n        super.connectedCallback();\n\n        this.updateHash = register({\n            [this.currentPageId]: this.currentPage?.toString() ?? \"\",\n            [this.currentPostId]: this.currentPost?.toString() ?? \"\"\n        }, this.boundHashUpdated);\n    }\n\n    /**\n     * Callback for when the hash is updated.\n     * @param state The state from the hash.\n     */\n    private hashUpdated(state: Record<string, any>): void {\n        let page = state[this.currentPageId];\n        if (page === \"\") {\n            page = null;\n        }\n        let post = state[this.currentPostId];\n        if (post === \"\") {\n            post = null;\n        }\n        this.currentPage = Number(page);\n        this.currentPost = Number(post);\n        this._load();\n    }\n\n    /**\n     * Load the blog content.\n     */\n    private async _load(): Promise<void> {\n        if (this.loading) {\n            return;\n        }\n        this.loading = true;\n\n        this.posts.splice(0, this.posts.length);\n\n        try {\n            if (!await this._loadPost()) {\n                await this._loadPosts();\n            }\n        }\n        catch {\n        }\n\n        this.$emit(\"change\");\n\n        this.loading = false;\n    }\n\n    /**\n     * Load the the currently selected blog.\n     * @returns true if there is a selected blog and it was loaded; otherwise, false.\n     */\n    private async _loadPost(): Promise<boolean> {\n        if (this.currentPost) {\n            try {\n                const response = await this.blogApi?.getPost(this.currentPost);\n                if (response) {\n                    this.post = response;\n                    return true;\n                }\n            }\n            catch {\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Load the blog listings.\n     */\n    private async _loadPosts(): Promise<void> {\n        this.currentPost = null;\n        this.post = null;\n\n        let currentPage: number;\n        if (!this.currentPage) {\n            currentPage = 0;\n        } else {\n            currentPage = this.currentPage;\n        }\n\n        try {\n            const response = await this.blogApi?.getPosts({\n                page: currentPage\n            });\n            if (response) {\n                for (const post of response.posts ?? []) {\n                    if (post) {\n                        this.posts.push(post);\n                    }\n                }\n            }\n        }\n        catch {\n        }\n    }\n}"]}