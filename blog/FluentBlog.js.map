{"version":3,"sources":["blog/FluentBlog.js","blog/FluentBlog.ts"],"names":["__decorate","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","attr","observable","FASTElement","customElement","nullableNumberConverter","isError","register","Blog","template","styles","FluentBlog","constructor","super","updateHash","boundHashUpdated","hashUpdated","bind","blogApi","loading","posts","post","currentPage","currentPost","blogId","oauthKey","currentPageId","id","currentPostId","currentPageChanged","_a","_b","toString","_load","currentPostChanged","configureBlogApi","blogIdChanged","oauthKeyChanged","connectedCallback","_c","_d","state","page","Number","splice","_loadPost","_loadPosts","$emit","response","getPost","getPosts","push","prototype","attribute","converter","name"],"mappings":"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","file":"FluentBlog.js","sourcesContent":[null,"import { } from 'https://unpkg.com/@fluentui/web-components@2.6.1'\nimport { attr, observable, FASTElement, customElement, nullableNumberConverter } from 'https://unpkg.com/@microsoft/fast-element@1.13.0'\nimport { isError } from '../drop-in-blog/request-helper.js'\nimport { register, ProviderCallback } from 'https://unpkg.com/hashed-es6@1.0.3'\nimport { Blog, Post, PostSummary } from '../drop-in-blog/blog.js'\nimport { template } from './template.js'\nimport { styles } from './styles.js'\nimport { IFluentBlog } from './IFluentBlog.js'\n\n@customElement({\n    name: 'fluent-blog',\n    template: template,\n    styles: styles\n})\nexport class FluentBlog extends FASTElement implements IFluentBlog {\n    /**\n     * Method to update the hash with state information. `null` when hash state not loaded.\n     */\n    private updateHash: ProviderCallback | null = null;\n    /**\n     * hashUpdated bound to the current instance.\n     */\n    private readonly boundHashUpdated = this.hashUpdated.bind(this);\n\n    private blogApi: Blog | null = null;\n\n    /**\n     * The component is loading the blog content.\n     */\n    @observable\n    loading: boolean = false;\n    /**\n     * The blog post summaries that are currently visible.\n     */\n    @observable\n    posts: PostSummary[] = [];\n    /**\n     * The blog post currently visible or null if showing the blog listing.\n     */\n    @observable\n    post: Post | null = null;\n\n    /**\n     * The current page in the blog listing.\n     */\n    @attr({\n        attribute: 'current-page',\n        converter: nullableNumberConverter\n    })\n    currentPage: number | null = null;\n\n    /**\n     * The ID of the current blog post or null if showing the listing.\n     */\n    @attr({\n        attribute: 'current-post',\n        converter: nullableNumberConverter\n    })\n    currentPost: number | null = null;\n\n    @attr({\n        attribute: 'blog-id'\n    })\n    blogId: string | null = null;\n\n    @attr({\n        attribute: 'oauth-key'\n    })\n    oauthKey: string | null = null;\n\n    /**\n     * The ID for the current page in the state.\n     */\n    private get currentPageId(): string {\n        return this.id + \"Page\";\n    }\n\n    /**\n     * The ID of the current post in the state.\n     */\n    private get currentPostId(): string {\n        return this.id + \"Post\";\n    }\n\n    /**\n     * Handles the currentPage attribute changed.\n     */\n    currentPageChanged(): void {\n        if (this.updateHash) {\n            this.updateHash({\n                [this.currentPageId]: this.currentPage?.toString() ?? \"\"\n            });\n            this._load();\n        }\n    }\n\n    /**\n     * Handles the currentPost attribute changed.\n     */\n    currentPostChanged(): void {\n        if (this.updateHash) {\n            this.updateHash({\n                [this.currentPostId]: this.currentPost?.toString() ?? \"\"\n            });\n            this._load();\n        }\n    }\n\n    private configureBlogApi(): void {\n        if (!this.blogApi &&\n            this.blogId &&\n            this.oauthKey) {\n                this.blogApi = new Blog(this.blogId, this.oauthKey);\n        }\n        if (this.updateHash) {\n            this._load();\n        }\n    }\n\n    blogIdChanged(): void {\n        this.configureBlogApi();\n    }\n\n    oauthKeyChanged(): void {\n        this.configureBlogApi();\n    }\n\n    override connectedCallback(): void {\n        super.connectedCallback();\n\n        this.updateHash = register({\n            [this.currentPageId]: this.currentPage?.toString() ?? \"\",\n            [this.currentPostId]: this.currentPost?.toString() ?? \"\"\n        }, this.boundHashUpdated);\n    }\n\n    /**\n     * Callback for when the hash is updated.\n     * @param state The state from the hash.\n     */\n    private hashUpdated(state: Record<string, any>): void {\n        let page = state[this.currentPageId];\n        if (page === \"\") {\n            page = null;\n        }\n        let post = state[this.currentPostId];\n        if (post === \"\") {\n            post = null;\n        }\n        this.currentPage = Number(page);\n        this.currentPost = Number(post);\n        this._load();\n    }\n\n    /**\n     * Load the blog content.\n     */\n    private async _load(): Promise<void> {\n        if (this.loading) {\n            return;\n        }\n        this.loading = true;\n\n        this.posts.splice(0, this.posts.length);\n\n        try {\n            if (!await this._loadPost()) {\n                await this._loadPosts();\n            }\n        }\n        catch {\n        }\n\n        this.$emit(\"change\");\n\n        this.loading = false;\n    }\n\n    /**\n     * Load the the currently selected blog.\n     * @returns true if there is a selected blog and it was loaded; otherwise, false.\n     */\n    private async _loadPost(): Promise<boolean> {\n        if (this.currentPost) {\n            const response = await this.blogApi?.getPost(this.currentPost);\n            if (response && !isError(response)) {\n                this.post = response;\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Load the blog listings.\n     */\n    private async _loadPosts(): Promise<void> {\n        this.currentPost = null;\n        this.post = null;\n\n        let currentPage: number;\n        if (!this.currentPage) {\n            currentPage = 0;\n        } else {\n            currentPage = this.currentPage;\n        }\n\n        const response = await this.blogApi?.getPosts({\n            page: currentPage,\n\n        });\n        if (response && !isError(response)) {\n            for (const post of response.posts ?? []) {\n                if (post) {\n                    this.posts.push(post);\n                }\n            }\n        }\n    }\n}"]}