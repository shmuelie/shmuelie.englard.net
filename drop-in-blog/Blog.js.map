{"version":3,"sources":["drop-in-blog/Blog.ts","drop-in-blog/Blog.js"],"names":["ApiError","Blog","constructor","blogId","oauthKey","this","getAuthors","_a","_b","response","get","success","message","code","data","authors","getPosts","options","pagination","total","posts","searchPosts","query","getCategories","categoryies","getPost","id","post","getPostBySlug","slug","api","requestUrl","URL","optionName","Object","keys","searchParams","append","fetch","method","headers","accept","authorization","json"],"mappings":"OAASA,aAAgB,uBAanB,MAAOC,KAIT,WAAAC,CAAYC,EAAgBC,GACxBC,KAAKF,OAASA,EACdE,KAAKD,SAAWA,CACpB,CAEA,gBAAME,GCfF,IAAIC,EAAIC,EDgBR,MAAMC,QAAiBJ,KAAKK,IAAqB,WACjD,IAAKD,EAASE,QACV,MAAM,IAAIX,SAASS,EAASG,QAASH,EAASI,MAElD,OAA6B,QAAtBL,EAAa,QAAbD,EAAAE,EAASK,YAAI,IAAAP,OAAA,EAAAA,EAAEQ,eAAO,IAAAP,EAAAA,EAAI,EACrC,CAEA,cAAMQ,CAASC,GCfX,IAAIV,EDgBJ,MAAME,QAAiBJ,KAAKK,IAAmB,QAASO,GACxD,IAAKR,EAASE,QACV,MAAM,IAAIX,SAASS,EAASG,QAASH,EAASI,MAElD,OAAoB,QAAbN,EAAAE,EAASK,YAAI,IAAAP,EAAAA,EAAI,CACpBW,WAAY,CACRC,MAAO,GAEXC,MAAO,GAEf,CAEA,iBAAMC,CAAYC,GCfd,IAAIf,EAAIC,EDgBR,MAAMC,QAAiBJ,KAAKK,IAAoB,SAAUY,GAC1D,IAAKb,EAASE,QACV,MAAM,IAAIX,SAASS,EAASG,QAASH,EAASI,MAElD,OAA2B,QAApBL,EAAa,QAAbD,EAAAE,EAASK,YAAI,IAAAP,OAAA,EAAAA,EAAEa,aAAK,IAAAZ,EAAAA,EAAI,EACnC,CAEA,mBAAMe,GCfF,IAAIhB,EAAIC,EDgBR,MAAMC,QAAiBJ,KAAKK,IAAwB,cACpD,IAAKD,EAASE,QACV,MAAM,IAAIX,SAASS,EAASG,QAASH,EAASI,MAElD,OAAiC,QAA1BL,EAAa,QAAbD,EAAAE,EAASK,YAAI,IAAAP,OAAA,EAAAA,EAAEiB,mBAAW,IAAAhB,EAAAA,EAAI,EACzC,CAEA,aAAMiB,CAAQC,GCfV,IAAInB,EAAIC,EDgBR,MAAMC,QAAiBJ,KAAKK,IAAkB,SAASgB,KACvD,IAAKjB,EAASE,QACV,MAAM,IAAIX,SAASS,EAASG,QAASH,EAASI,MAElD,OAA0B,QAAnBL,EAAa,QAAbD,EAAAE,EAASK,YAAI,IAAAP,OAAA,EAAAA,EAAEoB,YAAI,IAAAnB,EAAAA,EAAI,IAClC,CAEA,mBAAMoB,CAAcC,GCfhB,IAAItB,EAAIC,EDgBR,MAAMC,QAAiBJ,KAAKK,IAAkB,cAAcmB,KAC5D,IAAKpB,EAASE,QACV,MAAM,IAAIX,SAASS,EAASG,QAASH,EAASI,MAElD,OAA0B,QAAnBL,EAAa,QAAbD,EAAAE,EAASK,YAAI,IAAAP,OAAA,EAAAA,EAAEoB,YAAI,IAAAnB,EAAAA,EAAI,IAClC,CAEQ,SAAME,CAAOoB,EAAab,GAG9B,MAAMc,EAAkB,IAAIC,IAAI,sCAAsC3B,KAAKF,UAAU2B,KACrF,GAAIb,EACA,IAAK,MAAMgB,KAAcC,OAAOC,KAAKlB,GACjCc,EAAWK,aAAaC,OAAOJ,EAAYhB,EAAQgB,IAG3D,MAAMxB,QAAiB6B,MAAMP,EAAY,CACrCQ,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACRC,cAAe,UAAUrC,KAAKD,cAGtC,aAAaK,EAASkC,MAC1B","file":"Blog.js","sourcesContent":["import { ApiError } from './ApiError.js';\nimport { AuthorsResponse } from \"./AuthorsResponse.js\";\nimport { CategoriesResponse } from \"./CategoriesResponse.js\";\nimport { SearchResponse } from \"./SearchResponse.js\";\nimport { SearchQuery } from \"./SearchQuery.js\";\nimport { PostResponse } from \"./PostResponse.js\";\nimport { PostsResponse } from \"./PostsResponse.js\";\nimport { PostsParameters } from \"./PostsParameters.js\";\nimport { Post } from \"./Post.js\";\nimport { PostSummary } from \"./PostSummary.js\";\nimport { Category } from \"./Category.js\";\nimport { Author } from \"./Author.js\";\n\nexport class Blog {\n    readonly blogId: string;\n    readonly oauthKey: string;\n\n    constructor(blogId: string, oauthKey: string) {\n        this.blogId = blogId;\n        this.oauthKey = oauthKey;\n    }\n\n    async getAuthors(): Promise<Author[]> {\n        const response = await this.get<AuthorsResponse>('authors');\n        if (!response.success) {\n            throw new ApiError(response.message, response.code);\n        }\n        return response.data?.authors ?? [];\n    }\n\n    async getPosts(options?: PostsParameters): Promise<PostsResponse['data']> {\n        const response = await this.get<PostsResponse>('posts', options as {[k:string]:string});\n        if (!response.success) {\n            throw new ApiError(response.message, response.code);\n        }\n        return response.data ?? {\n            pagination: {\n                total: 0\n            },\n            posts: []\n        };\n    }\n\n    async searchPosts(query: SearchQuery): Promise<PostSummary[]> {\n        const response = await this.get<SearchResponse>('search', query as {[k:string]:any});\n        if (!response.success) {\n            throw new ApiError(response.message, response.code);\n        }\n        return response.data?.posts ?? [];\n    }\n\n    async getCategories(): Promise<Category[]> {\n        const response = await this.get<CategoriesResponse>('categories');\n        if (!response.success) {\n            throw new ApiError(response.message, response.code);\n        }\n        return response.data?.categoryies ?? [];\n    }\n\n    async getPost(id: number): Promise<Post | null> {\n        const response = await this.get<PostResponse>(`posts/${id}`);\n        if (!response.success) {\n            throw new ApiError(response.message, response.code);\n        }\n        return response.data?.post ?? null;\n    }\n\n    async getPostBySlug(slug: string): Promise<Post | null> {\n        const response = await this.get<PostResponse>(`posts/slug/${slug}`);\n        if (!response.success) {\n            throw new ApiError(response.message, response.code);\n        }\n        return response.data?.post ?? null;\n    }\n\n    private async get<T>(api: string, options?: {\n        [k: string]: any\n    }): Promise<T> {\n        const requestUrl: URL = new URL(`https://api.dropinblog.com/v2/blog/${this.blogId}/${api}`);\n        if (options) {\n            for (const optionName of Object.keys(options)) {\n                requestUrl.searchParams.append(optionName, options[optionName]);\n            }\n        }\n        const response = await fetch(requestUrl, {\n            method: 'GET',\n            headers: {\n                accept: 'application/json',\n                authorization: `Bearer ${this.oauthKey}`\n            }\n        });\n        return await response.json() as T;\n    }\n}",null]}