{"version":3,"sources":["drop-in-blog/posts.ts"],"names":["orError","get","rootUrl","async","getPosts","options","requestUrl","URL","optionsMap","optionName","Object","keys","searchParams","append","pagination","total","posts"],"mappings":"OACwBA,QAASC,IAAKC,YAAe,6BAa9CC,eAAeC,SAASC,EAAmB,CAAA,GAC9C,MAAMC,EAAkB,IAAIC,IAAI,GAAGL,iBAC7BM,EAAaH,EACnB,IAAK,MAAMI,KAAcC,OAAOC,KAAKN,GACjCC,EAAWM,aAAaC,OAAOJ,EAAYD,EAAWC,IAE1D,OAAOT,cAA8BC,IAAcK,GAAa,CAC5DQ,WAAY,CACRC,MAAO,GAEXC,MAAO,IAEf","file":"posts.js","sourcesContent":["import { operations } from '../../data/dropinblog.api';\nimport { ErrorResponse, orError, get, rootUrl } from './request-helper.js';\n\nexport type Options = operations['posts-list']['parameters']['query'];\nexport type Response = operations['posts-list']['responses']['200']['content']['application/json'];\nexport type Data = NonNullable<Response['data']>;\nexport type Post = NonNullable<Data['posts']>[0];\nexport type Author = NonNullable<NonNullable<Post>['author']>;\n\n/**\n * Fetch a paginated collection of posts. By default, only posts that are published and accessible to the public will be returned.\n * @param options Optional options for the request.\n * @returns A Data on success; an ErrorResponse on error.\n */\nexport async function getPosts(options: Options = {}): Promise<Data | ErrorResponse> {\n    const requestUrl: URL = new URL(`${rootUrl}/posts`);\n    const optionsMap = options as {[k:string]:any};\n    for (const optionName of Object.keys(options)) {\n        requestUrl.searchParams.append(optionName, optionsMap[optionName]);\n    }\n    return orError<Data, Response>(await get<Response>(requestUrl), {\n        pagination: {\n            total: 0\n        },\n        posts: []\n    });\n}"]}