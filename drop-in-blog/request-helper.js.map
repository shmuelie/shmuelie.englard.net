{"version":3,"sources":["drop-in-blog/request-helper.ts","drop-in-blog/request-helper.js"],"names":["orError","response","fallback","_a","_b","_c","success","data","code","message","isError","obj","async","get","blogId","oauthKey","api","options","requestUrl","URL","optionName","Object","keys","searchParams","append","fetch","method","headers","accept","authorization","json"],"mappings":"OAYM,SAAUA,QAAkDC,EAAqBC,GCXnF,IAAIC,EAAIC,EAAIC,EDYZ,OAAIJ,EAASK,QACW,QAAbH,EAAAF,EAASM,YAAI,IAAAJ,EAAAA,EAAID,EAGrB,CACHM,KAAmB,QAAbJ,EAAAH,EAASO,YAAI,IAAAJ,EAAAA,EAAI,EACvBK,QAAyB,QAAhBJ,EAAAJ,EAASQ,eAAO,IAAAJ,EAAAA,EAAI,gBAErC,QAEM,SAAUK,QAAQC,GACpB,MAAO,YAAaA,GAAO,SAAUA,CACzC,QAEOC,eAAeC,IAClBC,EACAC,EACAC,EACAC,GAGA,MAAMC,EAAkB,IAAIC,IAAI,sCAAsCL,KAAUE,KAChF,GAAIC,EACA,IAAK,MAAMG,KAAcC,OAAOC,KAAKL,GACjCC,EAAWK,aAAaC,OAAOJ,EAAYH,EAAQG,IAG3D,MAAMnB,QAAiBwB,MAAMP,EAAY,CACrCQ,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACRC,cAAe,UAAUd,OAGjC,aAAad,EAAS6B,MAC1B","file":"request-helper.js","sourcesContent":["export interface ErrorResponse {\n    readonly code: number;\n    readonly message: string;\n}\n\ninterface Response<T> {\n    success?: boolean;\n    code?: number;\n    message?: string;\n    data?: T;\n}\n\nexport function orError<TData, TResponse extends Response<TData>>(response: TResponse, fallback: TData): TData | ErrorResponse {\n    if (response.success) {\n        return response.data ?? fallback;\n    }\n\n    return {\n        code: response.code ?? 0,\n        message: response.message ?? \"Unknown Error\"\n    };\n}\n\nexport function isError(obj: any): obj is ErrorResponse {\n    return 'message' in obj && 'code' in obj;\n}\n\nexport async function get<T>(\n    blogId: string,\n    oauthKey: string,\n    api: string,\n    options?: {\n        [k: string]: string\n    }): Promise<T> {\n    const requestUrl: URL = new URL(`https://api.dropinblog.com/v2/blog/${blogId}/${api}`);\n    if (options) {\n        for (const optionName of Object.keys(options)) {\n            requestUrl.searchParams.append(optionName, options[optionName]);\n        }\n    }\n    const response = await fetch(requestUrl, {\n        method: 'GET',\n        headers: {\n            accept: 'application/json',\n            authorization: `Bearer ${oauthKey}`\n        }\n    });\n    return await response.json() as T;\n}",null]}