{"version":3,"sources":["drop-in-blog/search.ts","drop-in-blog/search.js"],"names":["orError","get","isError","async","searchPosts","blogId","oauthKey","query","_a","response","posts"],"mappings":"OACwBA,QAASC,IAAKC,YAAe,6BAY9CC,eAAeC,YAAYC,EAAgBC,EAAkBC,GCXhE,IAAIC,EDYJ,MAAMC,EAAWT,cAA8BC,IAAcI,EAAQC,EAAU,SAAUC,GAA4B,CACjHG,MAAO,KAEX,OAAIR,QAAQO,GACDA,EAEU,QAAdD,EAAAC,EAASC,aAAK,IAAAF,EAAAA,EAAI,EAC7B","file":"search.js","sourcesContent":["import { operations } from '../../data/dropinblog.api';\nimport { ErrorResponse, orError, get, isError } from './request-helper.js';\nimport { PostSummary } from './schemas.js';\n\nexport type Query = operations['posts-search']['parameters']['query'];\ntype Response = operations['posts-search']['responses']['200']['content']['application/json'];\ntype Data = NonNullable<Response['data']>;\n\n/**\n * Search for posts.\n * @param query The search query.\n * @returns An array of posts on success; an ErrorResponse on error.\n */\nexport async function searchPosts(blogId: string, oauthKey: string, query: Query): Promise<PostSummary[] | ErrorResponse> {\n    const response = orError<Data, Response>(await get<Response>(blogId, oauthKey, 'search', query as {[k:string]:any}), {\n        posts: []\n    });\n    if (isError(response)) {\n        return response;\n    }\n    return response.posts ?? [];\n}",null]}