{"version":3,"sources":["fluent-blog.js","fluent-blog.ts"],"names":["__decorate","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","attr","html","repeat","observable","FASTElement","customElement","css","when","nullableNumberConverter","convertPost","isError","register","Blog","listPostsTemplate","x","headline","parent","currentPost","Number","image","datePublished","Date","toLocaleString","abstract","listTemplate","posts","postTemplate","_a","post","articleBody","loadingTemplate","noPostsTemplate","postsTemplate","loadedTemplate","template","loading","styles","FluentBlog","constructor","super","updateHash","boundHashUpdated","hashUpdated","bind","blogApi","currentPage","blogId","oauthKey","currentPageId","id","currentPostId","currentPageChanged","_b","toString","_load","currentPostChanged","configureBlogApi","blogIdChanged","oauthKeyChanged","connectedCallback","_c","_d","state","page","splice","_loadPost","_loadPosts","$emit","response","getPost","getPosts","push","prototype","attribute","converter","name"],"mappings":"AAAA,IAAIA,WAAcC,MAAQA,KAAKD,YAAe,SAAUE,EAAYC,EAAQC,EAAKC,GAC7E,IAA2HC,EAAvHC,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOM,OAAOC,yBAAyBT,EAAQC,GAAOC,EACrH,GAAuB,iBAAZQ,SAAoD,mBAArBA,QAAQC,SAAyBJ,EAAIG,QAAQC,SAASZ,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIU,EAAIb,EAAWO,OAAS,EAAGM,GAAK,EAAGA,KAAST,EAAIJ,EAAWa,MAAIL,GAAKH,EAAI,EAAID,EAAEI,GAAKH,EAAI,EAAID,EAAEH,EAAQC,EAAKM,GAAKJ,EAAEH,EAAQC,KAASM,GAChJ,OAAOH,EAAI,GAAKG,GAAKC,OAAOK,eAAeb,EAAQC,EAAKM,GAAIA,CAChE,SCJSO,KAAMC,KAAMC,OAAQC,WAAYC,YAAaC,cAAeC,IAAKC,KAAMC,4BAA+B,0DAEtGC,gBAAmB,6CACnBC,YAAe,0CACfC,aAAkC,4CAClCC,SAAY,yBAErB,MAAMC,kBAAoBZ,IAA6B;;;;YAI3Ca,GAAKA,EAAEC;cACL,CAACD,EAAGxB,IAAMA,EAAE0B,OAAOC,YAAcC,OAAOJ,EAAE;iCACvBA,GAAKA,EAAEK,eAAeL,GAAKA,EAAEC;;kCAE5BD,GAAKA,EAAEC;0BACfD,GAAKA,EAAEM,kBAAkBN,GAAK,IAAIO,KAAaP,EAAEM,eAAeE;iCACzDR,GAAKA,EAAES;;;EAKlCC,aAAevB,IAAgB;;;UAG3BC,QAAOY,GAAKA,EAAEW,OAAOZ;;;EAKzBa,aAAezB,IAAgB;;;uDAGkBa,GAAKA,EAAEG,YAAc;UAClEH,IAAI,IAAAa,EAAC,OAAM,QAANA,EAAAb,EAAEc,YAAI,IAAAD,OAAA,EAAAA,EAAEZ,QAAQ;;sBAETD,IAAI,IAAAa,EAAC,OAAM,QAANA,EAAAb,EAAEc,YAAI,IAAAD,OAAA,EAAAA,EAAEP,aAAa,MAAKN,IAAI,IAAAa,EAAC,OAAA,IAAIN,KAAmB,QAANM,EAAAb,EAAEc,YAAI,IAAAD,OAAA,EAAAA,EAAEP,eAAeE,gBAAgB;gBAClGR,IAAI,IAAAa,EAAC,OAAM,QAANA,EAAAb,EAAEc,YAAI,IAAAD,OAAA,EAAAA,EAAER,KAAK,WAAUL,IAAI,IAAAa,EAAC,OAAM,QAANA,EAAAb,EAAEc,YAAI,IAAAD,OAAA,EAAAA,EAAEZ,QAAQ;2BACtCD,IAAI,IAAAa,EAAC,OAAM,QAANA,EAAAb,EAAEc,YAAI,IAAAD,OAAA,EAAAA,EAAEE,WAAW;;EAI7CC,gBAAkB7B,IAAgB;;;;;;EAQlC8B,gBAAkB9B,IAAgB;;;;EAMlC+B,cAAgB/B,IAAgB;EACpCM,MAAKO,GAAwB,IAAnBA,EAAEW,MAAMjC,QAAcuC;EAChCxB,MAAKO,GAAKA,EAAEW,MAAMjC,OAAS,GAAGgC;EAG1BS,eAAiBhC,IAAgB;EACrCM,MAAKO,GAAgB,OAAXA,EAAEc,MAAeI;EAC3BzB,MAAKO,GAAgB,OAAXA,EAAEc,MAAeF;EAGvBQ,SAAWjC,IAAgB;MAC3BM,MAAKO,GAAKA,EAAEqB,SAASL;MACrBvB,MAAKO,IAAMA,EAAEqB,SAASF;EAGtBG,OAAS9B,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiGX,IAAM+B,WAAN,cAAyBjC,YAAzB,WAAAkC,GDTCC,SAAShD,WCaLP,KAAAwD,WAAsC,KAI7BxD,KAAAyD,iBAAmBzD,KAAK0D,YAAYC,KAAK3D,MAElDA,KAAA4D,QAAuB,KAM/B5D,KAAAmD,SAAmB,EAKnBnD,KAAAyC,MAAuB,GAKvBzC,KAAA4C,KAA2B,KAS3B5C,KAAA6D,YAA6B,KAS7B7D,KAAAiC,YAA6B,KAK7BjC,KAAA8D,OAAwB,KAKxB9D,KAAA+D,SAA0B,IAwJ9B,CAnJI,iBAAYC,GACR,OAAOhE,KAAKiE,GAAK,MACrB,CAKA,iBAAYC,GACR,OAAOlE,KAAKiE,GAAK,MACrB,CAKA,kBAAAE,GD/DI,IAAIxB,EAAIyB,ECgEJpE,KAAKwD,aACLxD,KAAKwD,WAAW,CACZ,CAACxD,KAAKgE,eAA4C,QAA5BI,EAAgB,QAAhBzB,EAAA3C,KAAK6D,mBAAW,IAAAlB,OAAA,EAAAA,EAAE0B,kBAAU,IAAAD,EAAAA,EAAI,KAE1DpE,KAAKsE,QAEb,CAKA,kBAAAC,GDlEI,IAAI5B,EAAIyB,ECmEJpE,KAAKwD,aACLxD,KAAKwD,WAAW,CACZ,CAACxD,KAAKkE,eAA4C,QAA5BE,EAAgB,QAAhBzB,EAAA3C,KAAKiC,mBAAW,IAAAU,OAAA,EAAAA,EAAE0B,kBAAU,IAAAD,EAAAA,EAAI,KAE1DpE,KAAKsE,QAEb,CAEQ,gBAAAE,IACCxE,KAAK4D,SACN5D,KAAK8D,QACL9D,KAAK+D,WACD/D,KAAK4D,QAAU,IAAIhC,KAAK5B,KAAK8D,OAAQ9D,KAAK+D,WAE9C/D,KAAKwD,YACLxD,KAAKsE,OAEb,CAEA,aAAAG,GACIzE,KAAKwE,kBACT,CAEA,eAAAE,GACI1E,KAAKwE,kBACT,CAES,iBAAAG,GDrEL,IAAIhC,EAAIyB,EAAIQ,EAAIC,ECsEhBtB,MAAMoB,oBAEN3E,KAAKwD,WAAa7B,SAAS,CACvB,CAAC3B,KAAKgE,eAA4C,QAA5BI,EAAgB,QAAhBzB,EAAA3C,KAAK6D,mBAAW,IAAAlB,OAAA,EAAAA,EAAE0B,kBAAU,IAAAD,EAAAA,EAAI,GACtD,CAACpE,KAAKkE,eAA4C,QAA5BW,EAAgB,QAAhBD,EAAA5E,KAAKiC,mBAAW,IAAA2C,OAAA,EAAAA,EAAEP,kBAAU,IAAAQ,EAAAA,EAAI,IACvD7E,KAAKyD,iBACZ,CAMQ,WAAAC,CAAYoB,GAChB,IAAIC,EAAOD,EAAM9E,KAAKgE,eACT,KAATe,IACAA,EAAO,MAEX,IAAInC,EAAOkC,EAAM9E,KAAKkE,eACT,KAATtB,IACAA,EAAO,MAEX5C,KAAK6D,YAAc3B,OAAO6C,GAC1B/E,KAAKiC,YAAcC,OAAOU,GAC1B5C,KAAKsE,OACT,CAKQ,WAAMA,GACV,IAAItE,KAAKmD,QAAT,CAGAnD,KAAKmD,SAAU,EAEfnD,KAAKyC,MAAMuC,OAAO,EAAGhF,KAAKyC,MAAMjC,QAEhC,UACeR,KAAKiF,mBACNjF,KAAKkF,YAEnB,CACA,MACA,CAEAlF,KAAKmF,MAAM,UAEXnF,KAAKmD,SAAU,CAff,CAgBJ,CAMQ,eAAM8B,GDvFV,IAAItC,ECwFJ,GAAI3C,KAAKiC,YAAa,CAClB,MAAMmD,QAA6B,QAAZzC,EAAA3C,KAAK4D,eAAO,IAAAjB,OAAA,EAAAA,EAAE0C,QAAQrF,KAAKiC,cAClD,GAAImD,IAAa1D,QAAQ0D,GAErB,OADApF,KAAK4C,KAAOnB,YAAY2D,IACjB,CAEf,CAEA,OAAO,CACX,CAKQ,gBAAMF,GD3FV,IAAIvC,EAAIyB,EC+FR,IAAIP,EAHJ7D,KAAKiC,YAAc,KACnBjC,KAAK4C,KAAO,KAMRiB,EAHC7D,KAAK6D,YAGQ7D,KAAK6D,YAFL,EAKlB,MAAMuB,QAA6B,QAAZzC,EAAA3C,KAAK4D,eAAO,IAAAjB,OAAA,EAAAA,EAAE2C,SAAS,CAC1CP,KAAMlB,KAGV,GAAIuB,IAAa1D,QAAQ0D,GACrB,IAAK,MAAMxC,KAAsB,QAAdwB,EAAAgB,EAAS3C,aAAK,IAAA2B,EAAAA,EAAI,GAC7BxB,GACA5C,KAAKyC,MAAM8C,KAAK9D,YAAYmB,GAI5C,GA7LA7C,WAAA,CADCoB,YDqGFkC,WAAWmC,UAAW,eAAW,GC/FhCzF,WAAA,CADCoB,YDmGFkC,WAAWmC,UAAW,aAAS,GC7F9BzF,WAAA,CADCoB,YDiGFkC,WAAWmC,UAAW,YAAQ,GCvF7BzF,WAAA,CAJCiB,KAAK,CACFyE,UAAW,eACXC,UAAWlE,2BD+FhB6B,WAAWmC,UAAW,mBAAe,GCpFpCzF,WAAA,CAJCiB,KAAK,CACFyE,UAAW,eACXC,UAAWlE,2BD4FhB6B,WAAWmC,UAAW,mBAAe,GCrFpCzF,WAAA,CAHCiB,KAAK,CACFyE,UAAW,aD4FhBpC,WAAWmC,UAAW,cAAU,GCrF/BzF,WAAA,CAHCiB,KAAK,CACFyE,UAAW,eD4FhBpC,WAAWmC,UAAW,gBAAY,GChJxBnC,WAAUtD,WAAA,CALtBsB,cAAc,CACXsE,KAAM,cACNzC,SAAUA,SACVE,OAAQA,UAECC,mBDwJJA","file":"fluent-blog.js","sourcesContent":[null,"import { } from 'https://unpkg.com/@fluentui/web-components@2.6.1'\nimport { attr, html, repeat, observable, FASTElement, customElement, css, when, nullableNumberConverter } from 'https://unpkg.com/@microsoft/fast-element@1.13.0'\nimport { BlogPosting } from '../data/schema'\nimport { convertPost } from './drop-in-blog/schema-converters.js'\nimport { isError } from './drop-in-blog/request-helper.js'\nimport { register, ProviderCallback } from 'https://unpkg.com/hashed-es6@1.0.3'\nimport { Blog } from './drop-in-blog/blog.js'\n\nconst listPostsTemplate = html<BlogPosting, FluentBlog>`\n<fluent-card\n    itemscope\n    itemtype=\"https://schema.org/BlogPosting\"\n    title=${x => x.headline}\n    @click=\"${(x, c) => c.parent.currentPost = Number(x['@id'])}\">\n    <img itemprop=\"image\" src=\"${x => x.image}\" alt=\"${x => x.headline}\" />\n    <div>\n        <h2 itemprop=\"headline\">${x => x.headline}</h2>\n        <time datetime=\"${x => x.datePublished}\">${x => new Date(<string>x.datePublished).toLocaleString()}</time>\n        <p itemprop=\"abstract\">${x => x.abstract}</p>\n    </div>\n</fluent-card>\n`\n\nconst listTemplate = html<FluentBlog>`\n<section class=\"blog-posts\">\n    <div>\n        ${repeat(x => x.posts, listPostsTemplate)}\n    </div>\n</section>\n`;\n\nconst postTemplate = html<FluentBlog>`\n<section class=\"blog-post\">\n    <h1>\n        <fluent-flipper direction=\"previous\" @click=\"${x => x.currentPost = null}\"></fluent-flipper>\n        ${x => x.post?.headline}\n    </h1>\n    <time datetime=\"${x => x.post?.datePublished}\">${x => new Date(<string>x.post?.datePublished).toLocaleString()}</time>\n    <img src=\"${x => x.post?.image}\" alt=\"${x => x.post?.headline}\" />\n    <article :innerHTML=\"${x => x.post?.articleBody}\"></article>\n</section>\n`;\n\nconst loadingTemplate = html<FluentBlog>`\n<section class=\"blog-loading\">\n    <div>\n        <fluent-progress-ring></fluent-progress-ring>\n    </div>\n</section>\n`;\n\nconst noPostsTemplate = html<FluentBlog>`\n<section class=\"no-posts\">\n    <h1>No Posts</h1>\n</section>\n`;\n\nconst postsTemplate = html<FluentBlog>`\n${when(x => x.posts.length === 0, noPostsTemplate)}\n${when(x => x.posts.length > 0, listTemplate)}\n`;\n\nconst loadedTemplate = html<FluentBlog>`\n${when(x => x.post === null, postsTemplate)}\n${when(x => x.post !== null, postTemplate)}\n`;\n\nconst template = html<FluentBlog>`\n    ${when(x => x.loading, loadingTemplate)}\n    ${when(x => !x.loading, loadedTemplate)}\n`;\n\nconst styles = css`\nsection.blog-loading {\n    margin: 20px;\n}\n\nsection.no-posts {\n    margin: 20px;\n}\n\nsection.blog-posts > div {\n    display: flex;\n    flex-wrap: wrap;\n    padding-left: 10px;\n}\n\nsection.blog-posts fluent-card {\n    max-width: 300px;\n    color: var(--neutral-foreground-rest);\n    margin: 10px;\n    width: 40vw;\n    cursor: pointer;\n}\n\nsection.blog-posts fluent-card img {\n    max-width: 300px;\n    width: 40vw;\n}\n\nsection.blog-posts fluent-card div {\n    padding: 0 10px 10px;\n}\n\nsection.blog-posts fluent-card time {\n    font-style: italic;\n}\n\nsection.blog-posts fluent-card p {\n    overflow-y: auto;\n    height: 100px;\n}\n\nsection.blog-posts fluent-card h2 {\n    text-overflow: ellipsis;\n    overflow-x: clip;\n    white-space: nowrap;\n}\n\nsection.blog-post {\n    margin: 20px;\n}\n\nsection.blog-post fluent-flipper {\n    color: var(--accent-foreground-rest);\n    width: calc(((var(--base-height-multiplier) + var(--density))* var(--design-unit) + var(--design-unit))* 1px)\n}\n\nsection.blog-post fluent-flipper:hover {\n    color: var(--accent-foreground-hover);\n}\n\nsection.blog-post img {\n    border: calc(var(--stroke-width) * 1px) solid var(--neutral-stroke-layer-rest);\n    border-radius: calc(var(--layer-corner-radius) * 1px);\n    box-shadow: var(--elevation-shadow-card-rest);\n}\n\nsection.blog-post a {\n    color: var(--accent-foreground-rest);\n}\n\nsection.blog-post a:hover {\n    color: var(--accent-foreground-hover);\n}\n\nsection.blog-post a:active {\n    color: var(--accent-foreground-active);\n}\n\nsection.blog-post a:focus {\n    color: var(--accent-foreground-focus);\n}\n\nsection.blog-post a.badge {\n    text-decoration: none !important;\n    display: block;\n}\n\nsection.blog-post time {\n    font-style: italic;\n}\n`;\n\n@customElement({\n    name: 'fluent-blog',\n    template: template,\n    styles: styles\n})\nexport class FluentBlog extends FASTElement {\n    /**\n     * Method to update the hash with state information. `null` when hash state not loaded.\n     */\n    private updateHash: ProviderCallback | null = null;\n    /**\n     * hashUpdated bound to the current instance.\n     */\n    private readonly boundHashUpdated = this.hashUpdated.bind(this);\n\n    private blogApi: Blog | null = null;\n\n    /**\n     * The component is loading the blog content.\n     */\n    @observable\n    loading: boolean = false;\n    /**\n     * The blog post summaries that are currently visible.\n     */\n    @observable\n    posts: BlogPosting[] = [];\n    /**\n     * The blog post currently visible or null if showing the blog listing.\n     */\n    @observable\n    post: BlogPosting | null = null;\n\n    /**\n     * The current page in the blog listing.\n     */\n    @attr({\n        attribute: 'current-page',\n        converter: nullableNumberConverter\n    })\n    currentPage: number | null = null;\n\n    /**\n     * The ID of the current blog post or null if showing the listing.\n     */\n    @attr({\n        attribute: 'current-post',\n        converter: nullableNumberConverter\n    })\n    currentPost: number | null = null;\n\n    @attr({\n        attribute: 'blog-id'\n    })\n    blogId: string | null = null;\n\n    @attr({\n        attribute: 'oauth-key'\n    })\n    oauthKey: string | null = null;\n\n    /**\n     * The ID for the current page in the state.\n     */\n    private get currentPageId(): string {\n        return this.id + \"Page\";\n    }\n\n    /**\n     * The ID of the current post in the state.\n     */\n    private get currentPostId(): string {\n        return this.id + \"Post\";\n    }\n\n    /**\n     * Handles the currentPage attribute changed.\n     */\n    currentPageChanged(): void {\n        if (this.updateHash) {\n            this.updateHash({\n                [this.currentPageId]: this.currentPage?.toString() ?? \"\"\n            });\n            this._load();\n        }\n    }\n\n    /**\n     * Handles the currentPost attribute changed.\n     */\n    currentPostChanged(): void {\n        if (this.updateHash) {\n            this.updateHash({\n                [this.currentPostId]: this.currentPost?.toString() ?? \"\"\n            });\n            this._load();\n        }\n    }\n\n    private configureBlogApi(): void {\n        if (!this.blogApi &&\n            this.blogId &&\n            this.oauthKey) {\n                this.blogApi = new Blog(this.blogId, this.oauthKey);\n        }\n        if (this.updateHash) {\n            this._load();\n        }\n    }\n\n    blogIdChanged(): void {\n        this.configureBlogApi();\n    }\n\n    oauthKeyChanged(): void {\n        this.configureBlogApi();\n    }\n\n    override connectedCallback(): void {\n        super.connectedCallback();\n\n        this.updateHash = register({\n            [this.currentPageId]: this.currentPage?.toString() ?? \"\",\n            [this.currentPostId]: this.currentPost?.toString() ?? \"\"\n        }, this.boundHashUpdated);\n    }\n\n    /**\n     * Callback for when the hash is updated.\n     * @param state The state from the hash.\n     */\n    private hashUpdated(state: Record<string, any>): void {\n        let page = state[this.currentPageId];\n        if (page === \"\") {\n            page = null;\n        }\n        let post = state[this.currentPostId];\n        if (post === \"\") {\n            post = null;\n        }\n        this.currentPage = Number(page);\n        this.currentPost = Number(post);\n        this._load();\n    }\n\n    /**\n     * Load the blog content.\n     */\n    private async _load(): Promise<void> {\n        if (this.loading) {\n            return;\n        }\n        this.loading = true;\n\n        this.posts.splice(0, this.posts.length);\n\n        try {\n            if (!await this._loadPost()) {\n                await this._loadPosts();\n            }\n        }\n        catch {\n        }\n\n        this.$emit(\"change\");\n\n        this.loading = false;\n    }\n\n    /**\n     * Load the the currently selected blog.\n     * @returns true if there is a selected blog and it was loaded; otherwise, false.\n     */\n    private async _loadPost(): Promise<boolean> {\n        if (this.currentPost) {\n            const response = await this.blogApi?.getPost(this.currentPost);\n            if (response && !isError(response)) {\n                this.post = convertPost(response);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Load the blog listings.\n     */\n    private async _loadPosts(): Promise<void> {\n        this.currentPost = null;\n        this.post = null;\n\n        let currentPage: number;\n        if (!this.currentPage) {\n            currentPage = 0;\n        } else {\n            currentPage = this.currentPage;\n        }\n\n        const response = await this.blogApi?.getPosts({\n            page: currentPage,\n\n        });\n        if (response && !isError(response)) {\n            for (const post of response.posts ?? []) {\n                if (post) {\n                    this.posts.push(convertPost(post));\n                }\n            }\n        }\n    }\n}"]}