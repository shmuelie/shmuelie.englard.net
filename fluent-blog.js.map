{"version":3,"sources":["fluent-blog.js","fluent-blog.ts"],"names":["__decorate","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","attr","html","repeat","observable","FASTElement","customElement","css","when","nullableNumberConverter","getPosts","convertPost","getPost","isError","register","listPostsTemplate","x","headline","parent","currentPost","Number","image","datePublished","Date","toLocaleString","abstract","listTemplate","posts","postTemplate","_a","post","articleBody","loadingTemplate","noPostsTemplate","postsTemplate","loadedTemplate","template","loading","styles","FluentBlog","constructor","super","updateHash","boundHashUpdated","hashUpdated","bind","currentPage","currentPageId","id","currentPostId","currentPageChanged","_b","toString","_load","currentPostChanged","connectedCallback","_c","_d","state","page","splice","_loadPost","_loadPosts","$emit","response","push","prototype","attribute","converter","name"],"mappings":"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","file":"fluent-blog.js","sourcesContent":[null,"import { } from 'https://unpkg.com/@fluentui/web-components@2.6.1'\nimport { attr, html, repeat, observable, FASTElement, customElement, css, when, nullableNumberConverter } from 'https://unpkg.com/@microsoft/fast-element@1.13.0'\nimport { BlogPosting } from '../data/schema'\nimport { getPosts } from './drop-in-blog/posts.js'\nimport { convertPost } from './drop-in-blog/schema-converters.js'\nimport { getPost } from './drop-in-blog/post.js'\nimport { isError } from './drop-in-blog/request-helper.js'\nimport { register, ProviderCallback } from 'https://unpkg.com/hashed-es6@1.0.3'\n\nconst listPostsTemplate = html<BlogPosting, FluentBlog>`\n<fluent-card\n    itemscope\n    itemtype=\"https://schema.org/BlogPosting\"\n    title=${x => x.headline}\n    @click=\"${(x, c) => c.parent.currentPost = Number(x['@id'])}\">\n    <img itemprop=\"image\" src=\"${x => x.image}\" alt=\"${x => x.headline}\" />\n    <div>\n        <h2 itemprop=\"headline\">${x => x.headline}</h2>\n        <time datetime=\"${x => x.datePublished}\">${x => new Date(<string>x.datePublished).toLocaleString()}</time>\n        <p itemprop=\"abstract\">${x => x.abstract}</p>\n    </div>\n</fluent-card>\n`\n\nconst listTemplate = html<FluentBlog>`\n<section class=\"blog-posts\">\n    <div>\n        ${repeat(x => x.posts, listPostsTemplate)}\n    </div>\n</section>\n`;\n\nconst postTemplate = html<FluentBlog>`\n<section class=\"blog-post\">\n    <h1>\n        <fluent-flipper direction=\"previous\" @click=\"${x => x.currentPost = null}\"></fluent-flipper>\n        ${x => x.post?.headline}\n    </h1>\n    <time datetime=\"${x => x.post?.datePublished}\">${x => new Date(<string>x.post?.datePublished).toLocaleString()}</time>\n    <img src=\"${x => x.post?.image}\" alt=\"${x => x.post?.headline}\" />\n    <article :innerHTML=\"${x => x.post?.articleBody}\"></article>\n</section>\n`;\n\nconst loadingTemplate = html<FluentBlog>`\n<section class=\"blog-loading\">\n    <div>\n        <fluent-progress-ring></fluent-progress-ring>\n    </div>\n</section>\n`;\n\nconst noPostsTemplate = html<FluentBlog>`\n<section class=\"no-posts\">\n    <h1>No Posts</h1>\n</section>\n`;\n\nconst postsTemplate = html<FluentBlog>`\n${when(x => x.posts.length === 0, noPostsTemplate)}\n${when(x => x.posts.length > 0, listTemplate)}\n`;\n\nconst loadedTemplate = html<FluentBlog>`\n${when(x => x.post === null, postsTemplate)}\n${when(x => x.post !== null, postTemplate)}\n`;\n\nconst template = html<FluentBlog>`\n    ${when(x => x.loading, loadingTemplate)}\n    ${when(x => !x.loading, loadedTemplate)}\n`;\n\nconst styles = css`\nsection.blog-loading {\n    margin: 20px;\n}\n\nsection.no-posts {\n    margin: 20px;\n}\n\nsection.blog-posts > div {\n    display: flex;\n    flex-wrap: wrap;\n    padding-left: 10px;\n}\n\nsection.blog-posts fluent-card {\n    max-width: 300px;\n    color: var(--neutral-foreground-rest);\n    margin: 10px;\n    width: 40vw;\n    cursor: pointer;\n}\n\nsection.blog-posts fluent-card img {\n    max-width: 300px;\n    width: 40vw;\n}\n\nsection.blog-posts fluent-card div {\n    padding: 0 10px 10px;\n}\n\nsection.blog-posts fluent-card time {\n    font-style: italic;\n}\n\nsection.blog-posts fluent-card p {\n    overflow-y: auto;\n    height: 100px;\n}\n\nsection.blog-posts fluent-card h2 {\n    text-overflow: ellipsis;\n    overflow-x: clip;\n    white-space: nowrap;\n}\n\nsection.blog-post {\n    margin: 20px;\n}\n\nsection.blog-post fluent-flipper {\n    color: var(--accent-foreground-rest);\n    width: calc(((var(--base-height-multiplier) + var(--density))* var(--design-unit) + var(--design-unit))* 1px)\n}\n\nsection.blog-post fluent-flipper:hover {\n    color: var(--accent-foreground-hover);\n}\n\nsection.blog-post img {\n    border: calc(var(--stroke-width) * 1px) solid var(--neutral-stroke-layer-rest);\n    border-radius: calc(var(--layer-corner-radius) * 1px);\n    box-shadow: var(--elevation-shadow-card-rest);\n}\n\nsection.blog-post a {\n    color: var(--accent-foreground-rest);\n}\n\nsection.blog-post a:hover {\n    color: var(--accent-foreground-hover);\n}\n\nsection.blog-post a:active {\n    color: var(--accent-foreground-active);\n}\n\nsection.blog-post a:focus {\n    color: var(--accent-foreground-focus);\n}\n\nsection.blog-post a.badge {\n    text-decoration: none !important;\n    display: block;\n}\n\nsection.blog-post time {\n    font-style: italic;\n}\n`;\n\n@customElement({\n    name: 'fluent-blog',\n    template: template,\n    styles: styles\n})\nexport class FluentBlog extends FASTElement {\n    /**\n     * Method to update the hash with state information. `null` when hash state not loaded.\n     */\n    private updateHash: ProviderCallback | null = null;\n    /**\n     * hashUpdated bound to the current instance.\n     */\n    private readonly boundHashUpdated = this.hashUpdated.bind(this);\n\n    /**\n     * The component is loading the blog content.\n     */\n    @observable\n    loading: boolean = false;\n    /**\n     * The blog post summaries that are currently visible.\n     */\n    @observable\n    posts: BlogPosting[] = [];\n    /**\n     * The blog post currently visible or null if showing the blog listing.\n     */\n    @observable\n    post: BlogPosting | null = null;\n\n    /**\n     * The current page in the blog listing.\n     */\n    @attr({\n        attribute: 'current-page',\n        converter: nullableNumberConverter\n    })\n    currentPage: number | null = null;\n\n    /**\n     * The ID of the current blog post or null if showing the listing.\n     */\n    @attr({\n        attribute: 'current-post',\n        converter: nullableNumberConverter\n    })\n    currentPost: number | null = null;\n\n    /**\n     * The ID for the current page in the state.\n     */\n    private get currentPageId(): string {\n        return this.id + \"Page\";\n    }\n\n    /**\n     * The ID of the current post in the state.\n     */\n    private get currentPostId(): string {\n        return this.id + \"Post\";\n    }\n\n    /**\n     * Handles the currentPage attribute changed.\n     */\n    currentPageChanged(): void {\n        if (this.updateHash) {\n            this.updateHash({\n                [this.currentPageId]: this.currentPage?.toString() ?? \"\"\n            });\n            this._load();\n        }\n    }\n\n    /**\n     * Handles the currentPost attribute changed.\n     */\n    currentPostChanged(): void {\n        if (this.updateHash) {\n            this.updateHash({\n                [this.currentPostId]: this.currentPost?.toString() ?? \"\"\n            });\n            this._load();\n        }\n    }\n\n    override connectedCallback(): void {\n        super.connectedCallback();\n\n        this.updateHash = register({\n            [this.currentPageId]: this.currentPage?.toString() ?? \"\",\n            [this.currentPostId]: this.currentPost?.toString() ?? \"\"\n        }, this.boundHashUpdated);\n    }\n\n    /**\n     * Callback for when the hash is updated.\n     * @param state The state from the hash.\n     */\n    private hashUpdated(state: Record<string, any>): void {\n        let page = state[this.currentPageId];\n        if (page === \"\") {\n            page = null;\n        }\n        let post = state[this.currentPostId];\n        if (post === \"\") {\n            post = null;\n        }\n        this.currentPage = Number(page);\n        this.currentPost = Number(post);\n        this._load();\n    }\n\n    /**\n     * Load the blog content.\n     */\n    private async _load(): Promise<void> {\n        if (this.loading) {\n            return;\n        }\n        this.loading = true;\n\n        this.posts.splice(0, this.posts.length);\n\n        try {\n            if (!await this._loadPost()) {\n                await this._loadPosts();\n            }\n        }\n        catch {\n        }\n\n        this.$emit(\"change\");\n\n        this.loading = false;\n    }\n\n    /**\n     * Load the the currently selected blog.\n     * @returns true if there is a selected blog and it was loaded; otherwise, false.\n     */\n    private async _loadPost(): Promise<boolean> {\n        if (this.currentPost) {\n            const response = await getPost(this.currentPost);\n            if (response && !isError(response)) {\n                this.post = convertPost(response);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Load the blog listings.\n     */\n    private async _loadPosts(): Promise<void> {\n        this.currentPost = null;\n        this.post = null;\n\n        let currentPage: number;\n        if (!this.currentPage) {\n            currentPage = 0;\n        } else {\n            currentPage = this.currentPage;\n        }\n\n        const response = await getPosts({\n            page: currentPage,\n\n        });\n        if (!isError(response)) {\n            for (const post of response.posts ?? []) {\n                if (post) {\n                    this.posts.push(convertPost(post));\n                }\n            }\n        }\n    }\n}"]}